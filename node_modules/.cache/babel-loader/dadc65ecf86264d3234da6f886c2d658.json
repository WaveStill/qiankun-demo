{"ast":null,"code":"var _jsxFileName = \"/Users/didi/react/react-antd/my-app-demo/src/home.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet quanju = 1;\n\nconst Home = props => {\n  _s();\n\n  const [count, setCount] = useState(1);\n  let copyCount = 5;\n  console.log('点击之前：', count, copyCount);\n\n  const btnClick = e => {\n    console.log(e);\n    setCount(count + 1);\n    copyCount = copyCount + 5;\n    quanju = quanju + 1;\n    logFn();\n  };\n\n  useEffect(() => {\n    // log 顺序是： 第一次进来 先执行 name() log  , \n    // 后续更新的时候 ，每次在更新之前都会执行 清除函数， 渲染完成之后 ，才会执行name()函数\n    // 但是清除 是在 函数组件中的所有 事件完成之后了，逻辑执行完，开始渲染之前的节点 ，\n    // class 里面定义的 值copyCpunt 每次+1 有效果， 但是function 里面定义的则没效果，每次都会清除成默认值\n    // 只有全局的 定义的才有+1 效果\n    // 但是局部刷新的时候，function 组件里面的count值 还是原来的值，并没有 清除， class里面的则是被清除了，\n    // 所以 用 class 或者 function的时候 其数据上的更新性质 一定要区分清楚 \n    function name() {\n      console.log('useEffect', quanju);\n    }\n\n    name();\n    return () => {\n      console.log('清除');\n    };\n  }, [count]);\n\n  const logFn = () => {\n    console.log('点击之后：', count, copyCount);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\" count : \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"copyCpunt: \", copyCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"quanju : \", quanju]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: btnClick,\n      children: \"hello world\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"1TKS5KxgEY7AZLcK9RXaoLbfBQg=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/didi/react/react-antd/my-app-demo/src/home.jsx"],"names":["React","useEffect","useState","quanju","Home","props","count","setCount","copyCount","console","log","btnClick","e","logFn","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;AACA,IAAIC,MAAM,GAAG,CAAb;;AACA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,CAAD,CAAlC;AACA,MAAIM,SAAS,GAAG,CAAhB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,KAArB,EAA4BE,SAA5B;;AACA,QAAMG,QAAQ,GAAIC,CAAD,IAAK;AACpBH,IAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACAL,IAAAA,QAAQ,CAACD,KAAK,GAAE,CAAR,CAAR;AACAE,IAAAA,SAAS,GAAGA,SAAS,GAAG,CAAxB;AACAL,IAAAA,MAAM,GAAGA,MAAM,GAAE,CAAjB;AACAU,IAAAA,KAAK;AACN,GAND;;AAOAZ,EAAAA,SAAS,CAAC,MAAI;AACZ;AACA;AACA;AAEA;AACA;AACA;AAED;AAEC,aAASa,IAAT,GAAe;AACbL,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBP,MAAxB;AACD;;AACDW,IAAAA,IAAI;AACJ,WAAO,MAAI;AACTL,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD,KAFD;AAGD,GAlBQ,EAkBP,CAACJ,KAAD,CAlBO,CAAT;;AAmBA,QAAMO,KAAK,GAAG,MAAI;AAChBJ,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,KAArB,EAA4BE,SAA5B;AACD,GAFD;;AAGA,sBACE;AAAA,4BACE;AAAA,8BAAcF,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gCAAgBE,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,8BAAcL,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAQ,MAAA,OAAO,EAAEQ,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAzCD;;GAAMP,I;;KAAAA,I;AA2CN,eAAeA,IAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nlet quanju = 1;\nconst Home = (props) => {\n  const [count, setCount] = useState(1);\n  let copyCount = 5;\n  console.log('点击之前：', count, copyCount);\n  const btnClick = (e)=>{\n    console.log(e);\n    setCount(count +1);\n    copyCount = copyCount + 5;\n    quanju = quanju +1;\n    logFn()\n  }\n  useEffect(()=>{\n    // log 顺序是： 第一次进来 先执行 name() log  , \n    // 后续更新的时候 ，每次在更新之前都会执行 清除函数， 渲染完成之后 ，才会执行name()函数\n    // 但是清除 是在 函数组件中的所有 事件完成之后了，逻辑执行完，开始渲染之前的节点 ，\n\n    // class 里面定义的 值copyCpunt 每次+1 有效果， 但是function 里面定义的则没效果，每次都会清除成默认值\n    // 只有全局的 定义的才有+1 效果\n    // 但是局部刷新的时候，function 组件里面的count值 还是原来的值，并没有 清除， class里面的则是被清除了，\n\n   // 所以 用 class 或者 function的时候 其数据上的更新性质 一定要区分清楚 \n\n    function name(){\n      console.log('useEffect',quanju);\n    }\n    name()\n    return ()=>{\n      console.log('清除');\n    }\n  },[count])\n  const logFn = ()=>{\n    console.log('点击之后：', count, copyCount);\n  }\n  return(\n    <div>\n      <h4> count : {count}</h4>\n      <h4>copyCpunt: {copyCount}</h4>\n      <h4>quanju : {quanju}</h4>\n      <button onClick={btnClick}>hello world</button>\n    </div>\n  )\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}